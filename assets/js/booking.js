var zeeba_stripe;
(function($) { // Containing everything neatly in an object so we can call everything
    zeeba_stripe = {
        //card: {},
        el_card: {},
        api_key: "...", // Found in an <element data-stripe-key="..."> instead
        api_key_el: {},
        load_stripe_api: function() {

            // Only load if a key exists on this page
            if ($("[data-stripe-key]").length <= 0) {
                return;
            }

            // This element may have options attached to it
            zeeba_stripe.api_key_el = $("[data-stripe-key]");


            if (typeof Stripe === "undefined") {
                // Setup the StripeJS <script> element because it isn't loaded yet
                var stripe_script = document.createElement('script');
                stripe_script.type = 'text/javascript';
                stripe_script.src = 'https://js.stripe.com/v3/';
                document.body.appendChild(stripe_script);


                stripe_script.onload = function() {

                    // Create a Stripe client.
                    try {
                        //window.stripe_api_key = zeeba_stripe.api_key;
                        window.stripe_api_key = zeeba_stripe.api_key_el.attr("data-stripe-key");
                        window.stripe_obj = Stripe(stripe_api_key);
                    }
                    catch (e) {
                        console.log("Error creating Stripe object.");
                        console.log(e);
                        return;
                    }

                    // This is an async call. 
                    // So we will need to declare onload stuff in another func
                    zeeba_stripe.after_stripe_onload();
                };
            }
        },
        after_stripe_onload: function() {

            // Custom stripe styles that must be defined in JS
            // See https://stripe.com/docs/stripe-js/elements/quickstart
            var stripe_styles = {
                base: {
                    color: '#32325d',
                    fontFamily: '"Montserrat", sans-serif',
                    fontSmoothing: 'antialiased',
                    fontSize: '13px',
                    '::placeholder': {
                        color: '#d6d8d9'
                    }
                },
                invalid: {
                    color: '#fa755a',
                    iconColor: '#fa755a'
                }
            };

            // 2. Create an instance of the card Element.
            var stripe_elements = window.stripe_obj.elements();

            if (zeeba_stripe.api_key_el.attr("data-stripe-mode") == "minimal") {
                zeeba_stripe.el_card = stripe_elements.create('cardNumber', { style: stripe_styles });
                zeeba_stripe.el_card.mount('#card-number');

                zeeba_stripe.el_card_exp = stripe_elements.create('cardExpiry', { style: stripe_styles });
                zeeba_stripe.el_card_exp.mount('#card-exp');                
            }
            else {
                zeeba_stripe.el_card = stripe_elements.create('card', { style: stripe_styles });
                zeeba_stripe.el_card.mount('#card-number');
            }


            /*
            zeeba_stripe.el_card.on('change', function(event) {
                zeeba_stripe.set_outcome(event);
            });
            */

            // On submit, we will handle the token generated by the credit card
            //$("form#step-4-form").on('submit', zeeba_stripe.on_formsubmit);
        },
        /*
        set_outcome: function(result) {

        },*/
        on_formsubmit: function(callback_func) {

            window.stripe_obj.createToken(zeeba_stripe.el_card).then(function(result) {

                // Save token to the stripe_token input box
                if (result.token) {
                    $("[name=stripe_token]").val(result.token.id);

                    console.log("Stripe Token");
                    console.log(result);

                    callback_func();

                } else if (result.error) {
                    // Handle error
                    //errorElement.textContent = result.error.message;
                    //errorElement.classList.add('visible');
                    console.log("Stripe Error");
                    console.log(result.error.message);

                    alert("Stripe Error\r\n" + result.error.message);


                    $('#step_submit').prop('disabled', false);
                    $('#step_submit').removeClass('loading');
                }
            });//(zeeba_stripe.set_outcome);


        }
    };

    // START HERE: Everything starts with this call.
    zeeba_stripe.load_stripe_api();

})(jQuery);



// Do not touch!
// var storage = typeof(Storage) !== undefined ? localStorage : undefined;

$(document).ready(function () {
    var page_id = window.wp_data.page_id;
    step_1_form();
    if (page_id == 272) {
        step_1();
    // } else if (page_id == 273) {
        step_2();
    } else if (page_id == 274) {
        step_3();
    } else if (page_id == 275) {
        step_4();
    } else if (page_id == 1121) {
        modify();
    }
    steps_policies();
});
function serializeForm(form) {
    var data = {};
    $.each(form.serializeArray(), function (_, kv) {
        if (data.hasOwnProperty(kv.name)) {
            data[kv.name] = $.makeArray(data[kv.name]);
            data[kv.name].push(kv.value);
        } else {
            data[kv.name] = kv.value;
        }
    });
    return data;
}
function steps_policies() {
    $('#policies_open').on('click', function (e) {
        preventDefault(e);
        $.magnificPopup.open({
            items: {
                src: $('#policies_popup'),
                type: 'inline'
            }
        });
    });
}

function step_1_form() {
    $('#step-1-submit').on('click', function (e) {
        preventDefault(e);
        var data = serializeForm($('#step-1-form')),
            btn = $(this);
        btn.addClass('loading');
        console.log(data);
        jxAction('zeeba_step_1', data, function (response) {
            btn.removeClass('loading');
            if (response.error) {
                alert(response.error);
            }
        });
    });
    $('#step-modify-submit').on('click', function (e) {
        preventDefault(e);
        var btn = $(this);
        btn.addClass('loading');
        var data = serializeForm($('#step-modify-form'));
        jxAction('zeeba_modify', data, function (response) {
            btn.removeClass('loading');
            if (response.error) {
                alert(response.error);
            }
        });
    });
}

function modify() {
    var btn = $('#reservation-cancel');
    btn.on('click', function(e) {
        e.preventDefault();

        if(confirm(btn.data('confirm') ? btn.data('confirm') : 'Are you sure you want to cancel reservation?')) {
            btn.addClass('loading');
            jxAction('zeeba_cancel', {}, function (response) {
                btn.removeClass('loading');
                if(response.error) {
                    alert(response.error);
                } else if(response.success) {
                    alert(response.success);
                }
            });
        }
    });
}

function step_1() {
    $('#has_discount_code').on('change', function () {
        if (!this.checked) {
            $('#discount_code').val('');
        }
    });
}

function step_2() {
    jxAction('zeeba_step_2_load', {}, function (data) {
        if (data.result) {
            var cont = $('#vehicles');
            cont.append(data.result);

            cont.find('[data-tipso]').css('display', 'inline-block').tipso({
                speed: 200,
                tooltipHover: true,
                background: '#ffffff',
                color: '#000000',
                size: 'small',
                offsetY: -10,
                width: '',
                maxWidth: 400
            });
            if (typeof live_edit !== 'undefined') {
                live_edit.init();
            }

            $('.select-vehicle').on('click', function (e) {
                preventDefault(e);
                var data = {
                    rate: $(this).data('rate')
                };
                var btn = $(this);
                btn.addClass('loading');
                jxAction('zeeba_step_2', data, function (response) {
                    btn.removeClass('loading');
                    if (response.error) {
                        // console.log(response);
                        alert(response.error);
                    }
                })
            });
        }
    });
}

function step_3() {
    jxAction('zeeba_step_3_load', {}, function (data) {
        if (data.result) {
            if (data.result === 'OK') {
                if(data.non_free === false) {
                    $('#non-free-container').find('td').text($('#non-free-container').data('empty'));
                } else {
                    $('#non-free-container').html(data.non_free);                   
                }
                $('#free-container').html(data.free);
                var both = $('#non-free-container, #free-container');
                both.find('input[type="checkbox"]').styler();
                both.find('[data-tipso]').css('display', 'inline-block').tipso({
                    speed: 200,
                    tooltipHover: true,
                    background: '#ffffff',
                    color: '#000000',
                    size: 'small',
                    offsetY: -25,
                    width: '',
                    maxWidth: 400
                });
                step_3_recalculates();
            } else {
                $('#error-container').html(data.result);
            }
        }
    });

    $('#email_copy').on('click', function (e) {
        preventDefault(e);
        $.magnificPopup.open({
            items: {
                src: $('#email_copy_popup'),
                type: 'inline'
            }
        });
    });

    $('#email_copy_send').on('click', function (e) {
        preventDefault(e);

        var btn = $(this);
        btn.addClass('loading');

        var data = step_3_collect();
        data.email = $('#send_to').val();
        jxAction('zeeba_step_3_copy', data, function (response) {
            btn.removeClass('loading');
            if (response.error) {
                // console.log(response);
                alert(response.error);
            } else {
                var overlay = $('<div class="sent"><h2>Request Sent</h2></div>');
                $('#email_copy_popup').append(overlay);
                overlay.fadeIn(300);
                setTimeout(function () {
                    overlay.fadeOut(300, function () {
                        $.magnificPopup.close();
                        overlay.remove();
                        $('#send_to').val('');
                    });
                }, 5000);
            }
        });
    });

    $('#request_more').on('click', function (e) {
        preventDefault(e);
        $.magnificPopup.open({
            items: {
                src: $('#request_more_popup'),
                type: 'inline'
            }
        });
    });

    $('#request_more_send').on('click', function (e) {
        preventDefault(e);

        var btn = $(this);
        btn.addClass('loading');

        var data = step_3_collect();
        data.first_name = $('#request_first_name').val();
        data.last_name = $('#request_last_name').val();
        data.phone = $('#request_phone').val();
        data.email = $('#request_email').val();
        data.message = $('#request_message').val();
        jxAction('zeeba_step_3_more', data, function (response) {
            btn.removeClass('loading');
            if (response.error) {
                // console.log(response);
                alert(response.error);
            } else {
                var overlay = $('<div class="sent"><h2>Request Sent</h2></div>');
                $('#request_more_popup').append(overlay);
                overlay.fadeIn(300);
                setTimeout(function () {
                    overlay.fadeOut(300, function () {
                        $.magnificPopup.close();
                        overlay.remove();
                        $('#request_first_name,#request_last_name,#request_phone,#request_email,#request_message').val('');
                    });
                }, 5000);
            }
        });
    });

    $('#step_submit').on('click', function (e) {
        preventDefault(e);

        var btn = $(this);
        btn.addClass('loading');

        var data = step_3_collect();
        jxAction('zeeba_step_3', data, function (response) {
            btn.removeClass('loading');
            if (response.error) {
                alert(response.error);
            }
        });
    });
}

function step_3_collect() {
    var data = {
        options: []
    };
    var checkboxes = $('.recalculatable').find('input[type="checkbox"]:checked');
    checkboxes.each(function (index, el) {
        if ($(el).data('opt') != '') {
            data.options.push($(el).data('opt'));
        }
    });
    return data;
}

function step_4() {
    var zip = $('#zip');
    var city = $('#city');
    var state = $('#state');

    /*
    $('#city, #state').on('change', function (e) {
        zip.data('no-ajax', true);
        $(this).unbind(e);
    });

    zip.mask('000000');
    zip.on('keyup', function (e) {
        if (zip.data('no-ajax')) {
            zip.unbind(e);
        } else {
            var val = zip.val();
            if (val.length < 5) {
                return;
            }
            $.ajax({
                url: 'https://api.zippopotam.us/US/' + zip.val()
            }).done(function (result) {
                if (result && !zip.data('no-ajax')) {
                    var place = result.places.pop();
                    city.val(place['place name']);
                    state.val(place['state abbreviation']).trigger('refresh');
                }
            });
        }
    });
    */

    var add_driver = $('.add_driver');
    add_driver.on('click', function () {
        var par = $('.additional_drivers');
        var cnt = par.children('.a_driver').length;
        if (cnt > 1) {
            return;
        } else if (cnt == 1) {
            add_driver.hide();
        }
        var placeholder_first_name = par.data('placeholder-first-name');
        var placeholder_last_name = par.data('placeholder-last-name');
        var i = $('#a_driver-first_name-1').length + 1;
        var el = $('<div class="input-group a_driver"></div>')
            .append($('<div class="input"></div>').append('<input type="text" name="a_driver-first_name-' + i + '" id="a_driver-first_name-' + i + '" required placeholder="' + placeholder_first_name + '" />'))
            .append($('<div class="input last"></div>').append('<input type="text" name="a_driver-last_name-' + i + '" id="a_driver-last_name-' + i + '" required placeholder="' + placeholder_last_name + '" />'))
            .append('<button type="button" class="remove"><i class="icon-cross"></i></button>');
        el.children('.remove').on('click', function () {
            $(this).parents('.input-group').remove();
            add_driver.show();
        });
        par.append(el);
    });

    var card_number = $('#card_number');
    var card_types = $('#card_types');
    card_number.mask('0000 0000 0000 0000');
    card_number.on('keyup', function () {
        var type = getCardType(card_number.val());
        card_types.attr('class', type == undefined ? '' : type);
    });

    step_4_policies();

    step_4_fileupload();

    $('#step_submit').on('click', function (e) {
        preventDefault(e);

        var data = serializeForm($('#step-4-form'));
        var btn = $(this);
        btn.addClass('loading');

        // See if Stripe API exists...
        if (typeof window.stripe_obj !== "undefined") {
            zeeba_stripe.on_formsubmit(function() {

                // Reserialize the data because 'stripe_token' is a new field
                var data = serializeForm($('#step-4-form'));

                // Complete transaction the old way
                jxAction('zeeba_step_4', {form: data}, function (response) {
                    btn.removeClass('loading');
                    if (response.error) {
                        // console.log(response);
                        alert(response.error);
                    }
                });
            });
        }
        else {
            // Complete transaction the old way
            jxAction('zeeba_step_4', {form: data}, function (response) {
                btn.removeClass('loading');
                if (response.error) {
                    // console.log(response);
                    alert(response.error);
                }
            });
        }
    });
}

function step_3_calculate(elements, callback) {
    $('tr.opts').remove();
    var opts = [];
    elements.each(function (index, value) {
        var that = $(value);
        if (value.checked) {
            opts.push(that.data('opt'));
        }

        that.data('was-selected', value.checked ? 'true' : 'false');
    });

    jxAction('zeeba_step_3_calculate', {options: opts}, function (response) {
        if (response.result) {
            $('#rates-block').find('tbody').html(response.result);
            callback(true);
            $("html, body").animate({ scrollTop: $("#rates-block").offset().top }, 1500);
        }
        if (response.error) {
            // console.log(response);
            alert(response.error);
        }
    });
}

function step_4_policies() {
    var submit = $('#step_submit');
    var agree = $('#agree');
    var agree_fake = $('#agree_fake');
    var agreement = $('#agreement');
    submit.prop('disabled', true);
    agree.on('change', function () {
        if (agree.is(':checked')) {
            agree.prop('checked', false).trigger('refresh');
            $.magnificPopup.open({
                items: {
                    src: agreement,
                    type: 'inline'
                }
            });
        }
        submit.prop('disabled', true);
    });
    agree_fake.on('change', function () {
        if (agree_fake.is(':checked')) {
            setTimeout(function () {
                $.magnificPopup.close({
                    items: {
                        src: agreement,
                        type: 'inline'
                    }
                });
                agree_fake.prop('checked', false).trigger('refresh');
            }, 500);
            agree.prop('checked', true).trigger('refresh');
            submit.prop('disabled', false);
        }
    })
}

function step_4_fileupload() {
    var i = 0;
    var files_container = $('#files');
    var attach_container = $('#attached-files');
    $('#choose-files').fileupload({
        url: wp_data.admin_ajax_url,
        formData: {
            action: 'zeeba_file_upload'
        },
        acceptFileTypes: /(\.|\/)(gif|jpe?g|png|docx?|xlsx?|rtf|pdf)$/i,
        sequentialUploads: true,
        progress: function (e, data) {
            var progress = parseInt(data.loaded / data.total * 100, 10);
            $('#file-' + data.files[0]['pi']).find('.file-progress').css(
                'width',
                progress + '%'
            );
        },
        done: function (e, data) {
            if (data.result.attach_id) {
                var list;
                try {
                    list = JSON.parse(attach_container.val());
                } catch (e) {
                    list = [];
                }
                list.push(data.result.attach_id);
                attach_container.val(JSON.stringify(list));
                var el = $('#file-' + data.files[0]['pi']);
                el.data('attach-id', data.result.attach_id);
                el.find('.file-progress-bar').remove();
                el.append(
                    $('<div></div>', {
                        'class': 'file-remove'
                    })
                        .text('Remove')
                        .on('click', function () {
                            var list;
                            try {
                                list = JSON.parse(attach_container.val());
                            } catch (e) {
                                list = [];
                            }
                            var index = list.indexOf(data.result.attach_id);
                            if (index > -1) {
                                list.splice(index, 1);
                            }
                            attach_container.val(JSON.stringify(list));
                            el.remove();
                        })
                );
            } else {
                var el = $('#file-' + data.files[0]['pi']);
                el.data('attach-id', data.result.attach_id);
                el.find('.file-progress-bar').remove();
                el.append(
                    $('<div></div>', {
                        'class': 'file-error'
                    })
                        .text('Error ocured')
                );
            }
        },
        add: function (e, data) {
            $.each(data.files, function (index, el) {
                data.files[index]['pi'] = i;
                var file_block = $('<div></div>', {
                    'class': 'file-item',
                    'id': 'file-' + i
                }).append(
                    $('<div></div>', {
                        'class': 'file-name'
                    }).text(el.name)
                ).append(
                    $('<div></div>', {
                        'class': 'file-icon ' + extension(data.files[index].name),
                        'data-type': extension(data.files[index].name)
                    })
                ).append(
                    $('<div></div>', {
                        'class': 'file-progress-bar'
                    }).append(
                        $('<div></div>', {
                            'class': 'file-progress',
                            'style': 'width: 0%'
                        })
                    )
                );
                files_container.append(file_block);

                data.submit();
                i++;
            });
        }
    });
}

function getCardType(number) {
    var re = new RegExp("^4");
    if (number.match(re) != null)
        return "visa";

    // Mastercard
    re = new RegExp("^(5([1-5]|0(20|38))|6304|6759|6761)");
    if (number.match(re) != null)
        return "mastercard";

    // AMEX
    re = new RegExp("^3[47]");
    if (number.match(re) != null)
        return "americanexpress";

    // Discover
    re = new RegExp("^6(011|4[4-9]|5|22([2-8]|1(2[6-9]|[3-9])|9(2[1-5]|1)))");
    if (number.match(re) != null)
        return "discover";
}

function step_3_recalculates() {
    var checkboxes = $('.recalculatable').find('input[type="checkbox"]');
    var btn = $('.recalculate').find('button');
    var rates_block = $('#rates-block');
    var was_calculated = false;
    reset_was_selected(checkboxes);
    rates_block.slideUp();

    var onChange = function () {
        var $this = $(this);
        if($this.hasClass('alt') && $this.is(':checked')) {
            checkboxes.off('change', onChange);
            checkboxes.filter('.alt')
                .prop('checked', false)
                .trigger('refresh');
            $this.prop('checked', true)
                .trigger('refresh');
            checkboxes.on('change', onChange);
        }
        if (was_selected_changed(checkboxes)) {
            btn.attr('disabled', null);
        } else {
            btn.attr('disabled', 'disabled');
        }
    };
    checkboxes.on('change', onChange);
    btn.on('click', function () {
        var that = $(this);
        btn.addClass('loading');
        step_3_calculate(checkboxes, function (result) {
            btn.removeClass('loading');
            if (result) {
                btn.attr('disabled', 'disabled');
                if (!was_calculated) {
                    if (that.data('text')) {
                        btn.text(that.data('text'));
                    }
                    was_calculated = true;
                    rates_block.slideDown();
                }
            }
        });

    });
    var static_btn = btn.filter('.static');
    var fixed_btn = btn.filter('.fixed');
    if (isScrolledTillView(static_btn)) {
        fixed_btn.hide();
    }
    $(document).on('scroll', function () {
        if (isScrolledTillView(static_btn)) {
            fixed_btn.hide();
        } else {
            fixed_btn.show();
        }
    });
}

function reset_was_selected(elements) {
    elements.each(function (index, value) {
        $(value).data('was-selected', value.checked ? 'true' : 'false');
    });
}

function was_selected_changed(elements) {
    var changed = false;
    elements.each(function (index, value) {
        if ($(value).data('was-selected') != (value.checked ? 'true' : 'false')) {
            changed = true;
        }
    });
    return changed;
}

// Do not edit code below this line
// Java-like String.hashCode()
String.prototype.hashCode = function () {
    var hash = 0, i, chr, len;
    if (this.length === 0) return hash;
    for (i = 0, len = this.length; i < len; i++) {
        chr = this.charCodeAt(i);
        hash = ((hash << 5) - hash) + chr;
        hash |= 0;
    }
    return hash;
};
// Simple number formater
Number.prototype.formatMoney = function (c, d, t) {
    var n = this,
        c = isNaN(c = Math.abs(c)) ? 2 : c,
        d = d == undefined ? "." : d,
        t = t == undefined ? "," : t,
        s = n < 0 ? "-" : "",
        i = String(parseInt(n = Math.abs(Number(n) || 0).toFixed(c))),
        j = (j = i.length) > 3 ? j % 3 : 0;
    return s + (j ? i.substr(0, j) + t : "") + i.substr(j).replace(/(\d{3})(?=\d)/g, "$1" + t) + (c ? d + Math.abs(n - i).toFixed(c).slice(2) : "");
};

// Storage functions
// function zeeb_storage(action, key = undefined, val = undefined) {
//  var ret_val = undefined;
//  if(storage !== undefined) {
//      if (!storage.zeebavans_booking ||
//          storage.zeebavans_booking_hash != storage.zeebavans_booking.hashCode()) {
//          storage.zeebavans_booking = JSON.stringify({});
//      }
//      var data;
//      try {
//          data = JSON.parse(storage.zeebavans_booking);
//      } catch(e) {
//          data = {};
//      }
//      if(action === 'set' && key !== undefined && val != undefined) {
//          ret_val = data[key] ? data[key] : undefined;
//          data[key] = val;
//          console.log(data);
//      } else if(action === 'get') {
//          ret_val = key === undefined ? data : (data[key] ? data[key] : val);
//      }
//      storage.zeebavans_booking = JSON.stringify(data);
//      storage.zeebavans_booking_hash = storage.zeebavans_booking.hashCode();
//  }
//  return ret_val;
// }
// function zeeb_set(key, val) {
//  return zeeb_storage('set', key, val);
// }
// function zeeb_get(key, def = undefined) {
//  return zeeb_storage('get', key, def);
// }

// Extract extension from filename
function extension(filename) {
    var re = /(?:\.([^.]+))?$/;
    return re.exec(filename)[1];
}






